@using cloudscribe.Web.Pagination
@using PagingDemo.Web.ViewModels
@using PagingDemo.Web.Models

@model ProductListViewModel
@{
    ViewBag.Title = "Browse all products with ViewModel";
}
<h2>@ViewBag.Title</h2>
<p>This demo uses alphabetic pager/filter in conjunction with a pager.
    If you click a letter that matches the start of a product category it 
    will filter to matching items and the pager will preserve that filter while paging.
    The only categories are Food, Electronics, and Shoes, so only F, E, or S will show any products.
    You can also manipulate the pageSize param in the url.</p>

<div>
    <cs-alphapager cs-alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                   cs-selected-letter="@Model.Query"
                   cs-all-label="All"
                   asp-controller="Paging"
                   asp-action="ProductList" 
                   cs-selected-letter-param="query"
                   ></cs-alphapager>
</div>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Product name</th>
            <th>Category</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Model.Products.Data)
        {
            <tr>
                <td>@product.Name</td>
                <td>@product.Category</td>
            </tr>}
    </tbody>
</table>
<div>
    <cs-pager cs-paging-pagesize="@Model.Products.PageSize"
              cs-paging-pagenumber="@Model.Products.PageNumber"
              cs-paging-totalitems="@Model.Products.TotalItems"
              cs-pagenumber-param="pageNumber"
              asp-controller="Paging"
              cs-previous-page-html="<a href='#' title='Previous page'><i class='glyphicon glyphicon-backward'></i></a>"
              cs-next-page-html="<a href='#' title='Next page'><i class='glyphicon glyphicon-forward'></i></a>"
              asp-action="ProductList" 
              asp-route-query="@Model.Query"
              asp-route-pagesize="@Model.Products.PageSize"></cs-pager>
</div>
